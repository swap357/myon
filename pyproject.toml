[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "myon"
version = "0.1.0"
description = "A modern Python library for generative art"
readme = "README.md"
license = { text = "Apache-2.0" }
authors = [
    { name = "Swapnil Patel", email = "swapnilpatel357@gmail.com" }
]
maintainers = [
    { name = "Swapnil Patel", email = "swapnilpatel357@gmail.com" }
]
keywords = ["generative-art", "art", "graphics", "creative-coding"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Education",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Artistic Software",
    "Topic :: Multimedia :: Graphics",
]
requires-python = ">=3.11"
dependencies = [
    "numpy>=1.24.0",
    "pillow>=10.0.0",
    "numba>=0.58.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "black>=23.9.0",
    "isort>=5.12.0",
]
docs = [
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=1.3.0",
]
all = ["myon[dev,docs]"]

[project.urls]
Homepage = "https://github.com/swap357/myon"
Documentation = "https://myon.readthedocs.io"
Repository = "https://github.com/swap357/myon"
Issues = "https://github.com/swap357/myon/issues"
Changelog = "https://github.com/swap357/myon/blob/main/CHANGELOG.md"

[tool.hatch.build.targets.wheel]
packages = ["src/myon"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/tests",
    "/README.md",
    "/LICENSE",
    "/pyproject.toml",
]

# Ruff configuration
[tool.ruff]
line-length = 100
target-version = "py311"
src = ["src", "tests"]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
]
ignore = [
    "E501",  # line too long (handled by formatter)
    "B008",  # do not perform function calls in argument defaults
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*.py" = ["ARG001", "ARG002"]

# Black configuration
[tool.black]
line-length = 100
target-version = ['py311', 'py312', 'py313']
include = '\.pyi?$'

# isort configuration
[tool.isort]
profile = "black"
line_length = 100
src_paths = ["src", "tests"]

# MyPy configuration
[tool.mypy]
python_version = "3.11"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

[[tool.mypy.overrides]]
module = "numba.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "myon.noise"
disable_error_code = ["misc", "no-any-return", "type-arg", "unused-ignore"]

# Pytest configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--verbose",
    "--cov=src/myon",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
branch = true
omit = [
    "*/tests/*",
    "*/__pycache__/*",
    "*/.venv/*",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

